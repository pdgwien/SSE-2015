Exploit A3 - Cross Site Scripting

Language: PHP

Files:

commentWriter.php:
takes a comment in form of a GET - Parameter named "comment" and stores the comment in the comment database

latestComment.php:
Reads the comment database and displays the last comment (first line of the text file).

comments.txt:
Text database containing all comments.

Instructions:

1) To execute the exploit, first call commentWriter.php, passing "comment" as a GET - parameter with the value 
Using a web browser:
commentWriter.php?comment=<script>var hackedDiv=document.getElementById("test");hackedDiv.innerHTML="HACKED";</script>

Using linux php command:
php -f commentWriter.php comment="<script>var hackedDiv=document.getElementById("test");hackedDiv.innerHTML="HACKED";</script>"

This will store a hacked comment in the database.

2) Call lastComment.php to display the latest comment. The vulnerable application will interpret part of the comment as javaScript and will replace the HTML of the web application.

php -f lastComment.php

Exploit explanation:
Cross-Site-Scripting is a family of attacks where the attacker is able to send malicious code to the web browser of the victim, which then gets executed, allowing for all types of security issues. For this attack to work, the attacker must insert the malicious data to the web application. The web application must then output the malicious data without properly validating or escaping it. The data then gets executed. There are different ways to input the malicious code into the web application. A common issue in the past consisted of attackers inserting scripts and invisible links to their signatures in web forums, thus executing their code whenever any user opens a thread where the signature is included. The attacker can then execute many malicious actions, such as sending sensitive data to their own systems. In my example, I use a simple web application which allows comments to be stored and the latest of the comments to be displayed. If the last comment is a hacked comment, using "print" in line 11 of lastComment.php sends the script to the victim's browser and executes it. Recent attacks that exploited XSS were made on TripAdvisor and Uber, where lacking user input sanitation/validation led to XSS code injection into the applications.

Exploit fix explanation:
Since the users of the application can enter any string that later gets output, using htmlentities when outputting the comment converts the whole comment into a html entity which gets shown but not interpreted, thus escaping the comment's malicious code. Another way to solve the problem would be to manually search the comments for e.g. "<script>" to detect hacked comments.